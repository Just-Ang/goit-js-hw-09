{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAaF,SAASC,cAAc,gBACpCE,EAAYH,SAASC,cAAc,eACnCG,EAAcJ,SAASC,cAAc,iBA0B3C,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACXC,aAAY,KACtBN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAjCbR,EAAOgB,iBAAiB,SAExB,SAAuBC,GACrBA,EAAMC,iBACN,IAAIC,EAAQC,SAASjB,EAAWkB,OAE5BC,EAAW,EACf,MAAMC,EAAOH,SAAShB,EAAUiB,OAC1BG,EAASJ,SAASf,EAAYgB,OAEpC,IAAK,IAAII,EAAID,EAAQC,GAAK,EAAGA,IAC3BH,GAAY,EACZhB,EAAcgB,EAAUH,GAASK,EAASC,GAAKF,GAC5CG,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBmB,QAAQC,IAAI,uBAAqBrB,QAAiBC,QAClDqB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBxB,QAAiBC,OAAW,IAE1EwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBmB,QAAQC,IAAI,sBAAoBrB,QAAiBC,QACjDqB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoB1B,QAAeC,OAAW,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst delayInput = document.querySelector('[name=delay]');\nconst stepInput = document.querySelector('[name=step]');\nconst amountInput = document.querySelector('[name=amount]');\n\nformEl.addEventListener('click', onSubmitClick);\n\nfunction onSubmitClick(event) {\n  event.preventDefault();\n  let delay = parseInt(delayInput.value);\n  //console.log(delay);\n  let position = 0;\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  for (let i = amount; i >= 1; i--) {\n    position += 1;\n    createPromise(position, delay + (amount - i) * step)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay} ms`);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay} ms`);\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    const timerId = setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setInterval","addEventListener","event","preventDefault","delay1","parseInt","value","position1","step","amount","i","then","console","log","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.8b4811ae.js.map"}